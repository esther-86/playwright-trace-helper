Also, extract out context-options to a new var. Use a new function when possible. From the content, extract out these

 "title": "ci-lumos/lumos-complete-task.spec.ts:10 â€º Validate that site user is able to start an activity with different screens in it in Visits in participant details in Lumos. {\"ticket\":\"TA-2989,@lumosTaskCompletion\",\"tcs\":\"PJT-T507,SSP-T20,SSP-T21,SSP-T22,SSP-T23,SSP-T24,SSP-T25,SSP-T26,SSP-T27,SSP-T28\",\"taskName\":\"PJT - All Screens Site Task\"}"

into a var containing JSON object so that we can query the tcs directly

On line 166, also, extract out the last x frame-snapshot from rootActions. Use a new function when possible.
Need the ones with html
    "html": [
      "HTML",
      {
        "lang": "en",
        "data-headlessui-focus-visible": ""
      },
      [
extractHtmlSnapshots should first put all the timestamp latest first. Then, when it found x, stop execution.

Lines 249 - put the following in a string to be sent to LLM
so that LLM can describe the page and note any errors or problems on the html

Call LLM to describe the page content for each snapshot and note if there are any error on the page.

===

From the first latestFirstRootActions, compose the stack trace where the error occured

The data is here:
/Users/huonglai/Desktop/SAVE/AITraceRemediator/AITraceRemediator_artifacts/testing/ci-lumos-lumos-complete-ta-1e22c-JT---All-Screens-Site-Task--chromium-retry1

Use code to do this.
The trace should be something like

   TimeoutError: locator.click: Timeout 30000ms exceeded.
   Call log:
     - waiting for locator('//table//tr[contains(., "OPP0605686185265") or descendant::text()[contains(., "OPP0605686185265")]]//a[contains(@class,"Link__StyledRouterLink") or contains(@class,"nucleus")]').first()

       at Function.clickLinkForTableRowWithText (/builds/product/web/apps/playwright/Flows/TableFlows.ts:73:36)
       at /builds/product/web/apps/playwright/Flows/LumosFlows.ts:166:27
       at Function.pollUntil (/builds/product/web/apps/medable-shared/Helpers/TimerHelper.ts:35:21)
       at Function.selectParticipantId (/builds/product/web/apps/playwright/Flows/LumosFlows.ts:160:5)
       at Function.loginToLumosAndSelectParticipantId (/builds/product/web/apps/playwright/Flows/LumosFlows.ts:185:7)
       at ThisTest._inviteOnboardRegisterLoginParticipantViaApi (/builds/product/web/apps/playwright/Fixtures/fixture-medable.ts:672:19)
       at ThisTest.initializeTestWithOnboardedParticipant (/builds/product/web/apps/playwright/Fixtures/fixture-medable.ts:630:13)
       at /builds/product/web/apps/playwright/tests-playwright/ci-lumos/lumos-complete-task.spec.ts:13:38


You're absolutely right! The function is extracting the internal Playwright stack trace instead of the test code stack trace. The issue is that the error stack in the trace data contains both the internal Playwright framework calls and the actual test code calls, but we need to filter out the Playwright internals and show only the test-related stack trace.
Let me fix this by modifying the function to extract the correct stack trace:

Extract trace using test.trace from the unzipped folder instead of the rootActions. Convert extract_stack_trace.py to composeStackTraceFromFirstError

===

I want to save the contextOptions and stackTrace. If going through a folder and a similar stacktrace exists, don't reanalyze and just say that it's the same root problem as the saved context options
save for similarity detection to not query LLM multiple times for same stacktrace

===

Save everything returned by analyzeTrace to be used when retrieving similarity

I'll modify the code to save everything returned by analyzeTrace to be used when retrieving similarity. This means updating the saveAnalysisContext function to store the complete analysis result, not just the contextOptions and stackTrace.